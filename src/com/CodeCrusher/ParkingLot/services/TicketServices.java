package com.CodeCrusher.ParkingLot.services;

import com.CodeCrusher.ParkingLot.Exceptions.GateNotFoundException;
import com.CodeCrusher.ParkingLot.Model.*;
import com.CodeCrusher.ParkingLot.Repositories.GateRepository;
import com.CodeCrusher.ParkingLot.Repositories.ParkingLotRepository;
import com.CodeCrusher.ParkingLot.Repositories.TicketRepository;
import com.CodeCrusher.ParkingLot.Repositories.VehicleRepository;
import com.CodeCrusher.ParkingLot.strategies.spotAssignedStrategy.SpotAssignmentStrategy;
import com.CodeCrusher.ParkingLot.strategies.spotAssignedStrategy.SpotAssignmentStrategyFactory;

import java.util.Date;
import java.util.Optional;

public class TicketServices {
	private GateRepository gateRepository;
	private VehicleRepository vehicleRepository;
	private ParkingLotRepository parkingLotRepository;
	private TicketRepository ticketRepository;

	public TicketServices(
		GateRepository gateRepository,
		VehicleRepository vehicleRepository,
		ParkingLotRepository parkingLotRepository,
		TicketRepository ticketRepository
	){
		this.gateRepository = gateRepository;
		this.vehicleRepository = vehicleRepository;
		this.parkingLotRepository = parkingLotRepository;
		this.ticketRepository = ticketRepository;
	}
	public Ticket issueTicket(
			VehicleType vehicleType ,
			String vehicleNumber,
			String vehicleOwnerName,
			Long gateId
	)throws GateNotFoundException {
		// 1. Create a ticket obj
		// 2. Assign spot
		// 3. Return
		Ticket ticket = new Ticket();
		/**ENTRY TIME**/
		ticket.setEntryTime(new Date());

		/** using optional checking gate is present or not **/
		Optional<Gate> gateOptional = gateRepository.findGateById(gateId);
		if(gateOptional.isEmpty()){
			throw new GateNotFoundException();
		}
		// Way 1:
		//   Gate gate = gateRepository.findGateById(gateId).get();
		// Way 2:
		Gate gate = gateOptional.get();
		gate.getGateNumber();
		/**
		 *   Using .get() we get the gate object
		 *  without it we cannot get gate object
		 **/

		/** Ticket generated at gate **/
		ticket.setGeneratedAt(gate);
		/** Ticket generated by owner **/
		ticket.setGeneratedBy(gate.getCurrentOperator());

		Vehicle savedVehicle;
		/**
		 *  Check if vehicle is on
		 *  1. YES
		 *      -- get vehicle of database
		 *      -- put in ticket object
		 *  2. NO
		 *      -- create new vehicle
		 *      -- save it to database
		 *      -- put in ticket object
		**/
		Optional<Vehicle> vehicleOptional = vehicleRepository.getVehicleByNumber(vehicleNumber);
		if(vehicleOptional.isEmpty()){
			Vehicle vehicle = new Vehicle();
			vehicle.setVehicleType(vehicleType);
			vehicle.setNumber(vehicleNumber);
			vehicle.setOwnerName(vehicleOwnerName);

			savedVehicle = vehicleRepository.saveVehicle(vehicle);
		}else{
			savedVehicle = vehicleOptional.get();
		}
		/** Setting vehicle in ticket **/
		ticket.setVehicle(savedVehicle);

		/** Assigning spot in ticket **/
		SpotAssignmentStrategyType assignmentStrategyType = parkingLotRepository.getParkingLotForGate(gate)
				.getSpotAssignmentStrategyType();
		SpotAssignmentStrategy spotAssignmentStrategy = SpotAssignmentStrategyFactory.getSpotForType(assignmentStrategyType);
		ticket.setAssignedSpot(spotAssignmentStrategy.getSpot(gate , vehicleType));

		ticket.setNumber("TICKET-"+ticket.getId());
		return ticketRepository.saveTicket(ticket);

	}
}
/** NOTES
 * To assign a spot in parking lot I need STRATEGY:
	 *  So create Spot Assigned Strategy
 */